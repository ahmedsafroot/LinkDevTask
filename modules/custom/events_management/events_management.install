<?php

use Drupal\Core\Database\Database;
use Drupal\taxonomy\Entity\Term;

/**
 * Implementation of hook_install().
 */
function etax_settings_install() {
    etax_settings_update_9100();
    etax_settings_update_9101();
    etax_settings_update_9102();
    etax_settings_update_9103();
    etax_settings_update_9104();
    etax_settings_update_9105();
    etax_settings_update_9111();
    etax_settings_update_9112();
    // keep features below.
    etax_settings_update_9110();
}

/**
 *  Delete content type: article. Delete taxonomy vocabulary: tags.
 */
function etax_settings_update_9100() {
  \Drupal::getContainer()
    ->get('entity_type.manager')
    ->getStorage('node_type')
    ->load('article')
    ->delete();

  \Drupal::getContainer()
    ->get('entity_type.manager')
    ->getStorage('taxonomy_vocabulary')
    ->load('tags')
    ->delete();
}

/**
 * Uninstall modules: contact, comment, color, history, tour.
 */
function etax_settings_update_9101() {
  \Drupal::service('module_installer')->uninstall([
    'contact',
    'comment',
    'color',
    'history',
    'tour',
  ]);
}

/**
 * Install contrib: SMTP Authentication Support
 * Install contrib: Token
 * Install contrib: Chaos tool suite (ctools)
 * Install contrib: Pathauto
 * Install contrib: Configuration Update Manager
 * Install contrib: Features
 * Install contrib: Flood control
 * Install contrib: Backup and Migrate
 * Install contrib: Devel
 * Install contrib: Security Kit
 * Install contrib: Taxonomy unique
 * Install contrib: Twig Tweak
 * Install contrib: Session Limit
 * Install contrib: Inactive Auto logout
 */
function etax_settings_update_9102() {
  \Drupal::service('module_installer')->install([
    'backup_migrate',
    'change_pwd_page',
    'config_update',
    'ctools',
    'devel',
    'features',
    'features_ui',
    'flood_control',
    'pathauto',
    'phpmailer_smtp',
    'seckit',
    'smtp',
    'taxonomy_unique',
    'token',
    'twig_tweak',
    'user_registrationpassword',
    'mailsystem',
    'mimemail',
    'required_api',
    'required_by_role',
    'pfdp',
    'session_limit',
    'inactive_autologout'
  ]);
}

/**
 * Install needed core modules.
 */
function etax_settings_update_9103() {
  \Drupal::service('module_installer')->install([
    'datetime_range',
    'language',
    'locale',
    'content_translation',
    'config_translation',
    /*'workflows',
    'content_moderation',*/
  ]);
}

/**
 * Add Countries Lookups
 */
function etax_settings_update_9104() {
  $entity_manager = \Drupal::service('entity_type.manager');
  $term_storage = $entity_manager->getStorage('taxonomy_term');
  $countries_en = ["AD" => "Andorra", "AE" => "United Arab Emirates", "AF" => "Afghanistan", "AG" => "Antigua and Barbuda", "AI" => "Anguilla", "AL" => "Albania", "AM" => "Armenia", "AN" => "Netherlands Antilles", "AO" => "Angola", "AQ" => "Antarctica", "AR" => "Argentina", "AS" => "American Samoa", "AT" => "Austria", "AU" => "Australia", "AW" => "Aruba", "AZ" => "Azerbaijan", "BA" => "Bosnia and Herzegovina", "BB" => "Barbados", "BD" => "Bangladesh", "BE" => "Belgium", "BF" => "Burkina Faso", "BG" => "Bulgaria", "BH" => "Bahrain", "BI" => "Burundi", "BJ" => "Benin", "BM" => "Bermuda", "BN" => "Brunei Darussalam", "BO" => "Bolivia", "BR" => "Brazil", "BS" => "Bahamas", "BT" => "Bhutan", "BV" => "Bouvet Island", "BW" => "Botswana", "BY" => "Belarus", "BZ" => "Belize", "CA" => "Canada", "CC" => "Cocos (Keeling) Islands", "CD" => "Congo, the Democratic Republic of the", "CF" => "Central African Republic", "CG" => "Congo", "CH" => "Switzerland", "CI" => "Cote D'Ivoire", "CK" => "Cook Islands", "CL" => "Chile", "CM" => "Cameroon", "CN" => "China", "CO" => "Colombia", "CR" => "Costa Rica", "CS" => "Serbia and Montenegro", "CU" => "Cuba", "CV" => "Cape Verde", "CX" => "Christmas Island", "CY" => "Cyprus", "CZ" => "Czech Republic", "DE" => "Germany", "DJ" => "Djibouti", "DK" => "Denmark", "DM" => "Dominica", "DO" => "Dominican Republic", "DZ" => "Algeria", "EC" => "Ecuador", "EE" => "Estonia", "EG" => "Egypt", "EH" => "Western Sahara", "ER" => "Eritrea", "ES" => "Spain", "ET" => "Ethiopia", "FI" => "Finland", "FJ" => "Fiji", "FK" => "Falkland Islands (Malvinas)", "FM" => "Micronesia, Federated States of", "FO" => "Faroe Islands", "FR" => "France", "GA" => "Gabon", "GB" => "United Kingdom", "GD" => "Grenada", "GE" => "Georgia", "GF" => "French Guiana", "GG" => "Guernsey", "GH" => "Ghana", "GI" => "Gibraltar", "GL" => "Greenland", "GM" => "Gambia", "GN" => "Guinea", "GP" => "Guadeloupe", "GQ" => "Equatorial Guinea", "GR" => "Greece", "GS" => "South Georgia and the South Sandwich Islands", "GT" => "Guatemala", "GU" => "Guam", "GW" => "Guinea-Bissau", "GY" => "Guyana", "HK" => "Hong Kong", "HM" => "Heard Island and Mcdonald Islands", "HN" => "Honduras", "HR" => "Croatia", "HT" => "Haiti", "HU" => "Hungary", "ID" => "Indonesia", "IE" => "Ireland", "IL" => "Israel", "IM" => "Isle of Man", "IN" => "India", "IO" => "British Indian Ocean Territory", "IQ" => "Iraq", "IR" => "Iran, Islamic Republic of", "IS" => "Iceland", "IT" => "Italy", "JE" => "Jersey", "JM" => "Jamaica", "JO" => "Jordan", "JP" => "Japan", "KE" => "Kenya", "KG" => "Kyrgyzstan", "KH" => "Cambodia", "KI" => "Kiribati", "KM" => "Comoros", "KN" => "Saint Kitts and Nevis", "KP" => "Korea, Democratic People's Republic of", "KR" => "Korea, Republic of", "KW" => "Kuwait", "KY" => "Cayman Islands", "KZ" => "Kazakhstan", "LA" => "Lao People's Democratic Republic", "LB" => "Lebanon", "LC" => "Saint Lucia", "LI" => "Liechtenstein", "LK" => "Sri Lanka", "LR" => "Liberia", "LS" => "Lesotho", "LT" => "Lithuania", "LU" => "Luxembourg", "LV" => "Latvia", "LY" => "Libyan Arab Jamahiriya", "MA" => "Morocco", "MC" => "Monaco", "MD" => "Moldova, Republic of", "MG" => "Madagascar", "MH" => "Marshall Islands", "MK" => "Macedonia, the Former Yugoslav Republic of", "ML" => "Mali", "MM" => "Myanmar", "MN" => "Mongolia", "MO" => "Macao", "MP" => "Northern Mariana Islands", "MQ" => "Martinique", "MR" => "Mauritania", "MS" => "Montserrat", "MT" => "Malta", "MU" => "Mauritius", "MV" => "Maldives", "MW" => "Malawi", "MX" => "Mexico", "MY" => "Malaysia", "MZ" => "Mozambique", "NA" => "Namibia", "NC" => "New Caledonia", "NE" => "Niger", "NF" => "Norfolk Island", "NG" => "Nigeria", "NI" => "Nicaragua", "NL" => "Netherlands", "NO" => "Norway", "NP" => "Nepal", "NR" => "Nauru", "NU" => "Niue", "NZ" => "New Zealand", "OM" => "Oman", "PA" => "Panama", "PE" => "Peru", "PF" => "French Polynesia", "PG" => "Papua New Guinea", "PH" => "Philippines", "PK" => "Pakistan", "PL" => "Poland", "PM" => "Saint Pierre and Miquelon", "PN" => "Pitcairn", "PR" => "Puerto Rico", "PS" => "Palestinian Territory, Occupied", "PT" => "Portugal", "PW" => "Palau", "PY" => "Paraguay", "QA" => "Qatar", "RE" => "Reunion", "RO" => "Romania", "RU" => "Russian Federation", "RW" => "Rwanda", "SA" => "Saudi Arabia", "SB" => "Solomon Islands", "SC" => "Seychelles", "SD" => "Sudan", "SE" => "Sweden", "SG" => "Singapore", "SH" => "Saint Helena", "SI" => "Slovenia", "SJ" => "Svalbard and Jan Mayen", "SK" => "Slovakia", "SL" => "Sierra Leone", "SM" => "San Marino", "SN" => "Senegal", "SO" => "Somalia", "SR" => "Suriname", "ST" => "Sao Tome and Principe", "SV" => "El Salvador", "SY" => "Syrian Arab Republic", "SZ" => "Swaziland", "TC" => "Turks and Caicos Islands", "TD" => "Chad", "TF" => "French Southern Territories", "TG" => "Togo", "TH" => "Thailand", "TJ" => "Tajikistan", "TK" => "Tokelau", "TL" => "Timor-Leste", "TM" => "Turkmenistan", "TN" => "Tunisia", "TO" => "Tonga", "TR" => "Turkey", "TT" => "Trinidad and Tobago", "TV" => "Tuvalu", "TW" => "Taiwan, Province of China", "TZ" => "Tanzania, United Republic of", "UA" => "Ukraine", "UG" => "Uganda", "UM" => "United States Minor Outlying Islands", "US" => "United States", "UY" => "Uruguay", "UZ" => "Uzbekistan", "VA" => "Holy See (Vatican City State)", "VC" => "Saint Vincent and the Grenadines", "VE" => "Venezuela", "VG" => "Virgin Islands, British", "VI" => "Virgin Islands, U.s.", "VN" => "Vietnam", "VU" => "Vanuatu", "WF" => "Wallis and Futuna", "WS" => "Samoa", "YE" => "Yemen", "YT" => "Mayotte", "ZA" => "South Africa", "ZM" => "Zambia", "ZW" => "Zimbabwe"];
  $countries_ar = ["AD" => "أندورا", "AE" => "الإمارات العربية المتحدة", "AF" => "أفغانستان", "AG" => "أنتيغوا وبربودا", "AI" => "أنغويلا", "AL" => "ألبانيا", "AM" => "أرمينيا", "AN" => "جزر الأنتيل الهولندية", "AO" => "أنغولا", "AQ" => "أنتاركتيكا", "AR" => "الأرجنتين", "AS" => "جزر ساموا الأمريكية", "AT" => "النمسا", "AU" => "أستراليا", "AW" => "أروبا", "AZ" => "أذربيجان", "BA" => "البوسنة والهرسك", "BB" => "باربادوس", "BD" => "بنجلاديش", "BE" => "بلجيكا", "BF" => "بوركينا فاسو", "BG" => "بلغاريا", "BH" => "مملكة البحرين", "BI" => "بوروندي", "BJ" => "بنين", "BM" => "برمودا", "BN" => "بروناي", "BO" => "بوليفيا", "BR" => "البرازيل", "BS" => "جزر البهاما", "BT" => "بوتان", "BV" => "جزيرة بوفيه", "BW" => "بوتسوانا", "BY" => "بيلاروس", "BZ" => "بيليز", "CA" => "كندا", "CC" => "جزر الكوكوس (كيلين)", "CD" => "الكونغو (جمهورية الكونغو الديمقراطية)", "CF" => "جمهورية أفريقيا الوسطى", "CG" => "الكونغو", "CH" => "سويسرا", "CI" => "كوت ديفوار (ساحل العاج)", "CK" => "جزر كوك", "CL" => "تشيلي", "CM" => "الكاميرون", "CN" => "الصين", "CO" => "كولومبيا", "CR" => "كوستاريكا", "CS" => "صربيا و مونتينيغرو", "CU" => "كوبا", "CV" => "الرأس الأخضر", "CX" => "جزيرة الكريسماس", "CY" => "قبرص", "CZ" => "جمهورية التشيك", "DE" => "ألمانيا", "DJ" => "جيبوتي", "DK" => "الدانمارك", "DM" => "دومينيكا", "DO" => "جمهورية الدومينيكان", "DZ" => "الجزائر", "EC" => "إكوادور", "EE" => "إستونيا", "EG" => "مصر", "EH" => "الصحراء الغربية", "ER" => "إريتريا", "ES" => "أسبانيا", "ET" => "إثيوبيا", "FI" => "فنلندا", "FJ" => "جزر فيجي", "FK" => "جزر فوكلاند (أيزلاس مالفيناس)", "FM" => "ماكرونيزيا", "FO" => "جزر فايرو", "FR" => "فرنسا", "GA" => "الجابون", "GB" => "المملكة المتحدة", "GD" => "غرينادا", "GE" => "جورجيا", "GF" => "جيانا الفرنسية", "GG" => "جيرنزي", "GH" => "غانا", "GI" => "جبل طارق", "GL" => "جرينلاند", "GM" => "جامبيا", "GN" => "غينيا", "GP" => "جواديلوب", "GQ" => "غينيا الاستوائية", "GR" => "اليونان", "GS" => "جورجيا الجنوبية وجزر ساندويتش الجنوبية", "GT" => "جواتيمالا", "GU" => "جوام", "GW" => "غينيا بيساو", "GY" => "جيانا", "HK" => "هونغ كونغ SAR", "HM" => "جزيرة هيرد وجزر ماكدونالد", "HN" => "هندوراس", "HR" => "كرواتيا", "HT" => "هايتي", "HU" => "المجر", "ID" => "إندونيسيا", "IE" => "أيرلندا", "IL" => "إسرائيل", "IM" => "جزيرة مان", "IN" => "الهند", "IO" => "إقليم المحيط الهندي البريطاني", "IQ" => "العراق", "IR" => "إيران", "IS" => "أيسلندا", "IT" => "إيطاليا", "JE" => "جيرسي", "JM" => "جامايكا", "JO" => "الأردن", "JP" => "اليابان", "KE" => "كينيا", "KG" => "قيرقيزستان", "KH" => "كامبوديا", "KI" => "كيريباتي", "KM" => "جزر القمر", "KN" => "سانت كيتس ونيفيس", "KP" => "كوريا الشمالية", "KR" => "كوريا", "KW" => "الكويت", "KY" => "جزر كايمان", "KZ" => "كازاخستان", "LA" => "لاوس", "LB" => "لبنان", "LC" => "سانت لوشيا", "LI" => "لختنشتاين", "LK" => "سيريلانكا", "LR" => "ليبيريا", "LS" => "ليسوتو", "LT" => "ليتوانيا", "LU" => "لوكسمبورج", "LV" => "لاتفيا", "LY" => "ليبيا", "MA" => "المغرب", "MC" => "موناكو", "MD" => "مولدوفا", "MG" => "مدغشقر", "MH" => "جزر مارشال", "MK" => "مقدونيا، جمهورية يوغوسلافيا السابقة", "ML" => "مالي", "MM" => "ميانمار", "MN" => "منغوليا", "MO" => "ماكاو", "MP" => "جزر ماريانا الشمالية", "MQ" => "مارتينيك", "MR" => "موريتانيا", "MS" => "مونتسيرات", "MT" => "مالطا", "MU" => "موريشيوس", "MV" => "جزر المالديف", "MW" => "مالاوي", "MX" => "المكسيك", "MY" => "ماليزيا", "MZ" => "موزمبيق", "NA" => "ناميبيا", "NC" => "كاليدونيا الجديدة", "NE" => "النيجر", "NF" => "جزيرة نورفوك", "NG" => "نيجيريا", "NI" => "نيكاراجوا", "NL" => "هولندا", "NO" => "النرويج", "NP" => "نيبال", "NR" => "ناورو", "NU" => "نيوا", "NZ" => "نيوزيلندا", "OM" => "عمان", "PA" => "بنما", "PE" => "بيرو", "PF" => "بولينزيا الفرنسية", "PG" => "بابوا-غينيا الجديدة", "PH" => "الفلبين", "PK" => "باكستان", "PL" => "بولندا", "PM" => "سانت بيير وميكولون", "PN" => "جزر البتكارين", "PR" => "بورتو ريكو", "PS" => "السلطة الفلسطينية", "PT" => "البرتغال", "PW" => "بالاو", "PY" => "باراجواي", "QA" => "قطر", "RE" => "ريونيون", "RO" => "رومانيا", "RU" => "روسيا", "RW" => "رواندا", "SA" => "المملكة العربية السعودية", "SB" => "جزر سولومون", "SC" => "سيشل", "SD" => "السودان", "SE" => "السويد", "SG" => "سنغافورة", "SH" => "سانت هيلينا", "SI" => "سلوفينيا", "SJ" => "سفالبارد وجان ماين", "SK" => "سلوفاكيا", "SL" => "سيراليون", "SM" => "سان مارينو", "SN" => "السنغال", "SO" => "الصومال", "SR" => "سورينام", "ST" => "ساوتوماي وبرينسيبا", "SV" => "السلفادور", "SY" => "سوريا", "SZ" => "سوازيلاند", "TC" => "جزر تركس وكايكوس", "TD" => "تشاد", "TF" => "المناطق الفرنسية الجنوبية ومناطق انتراكتيكا", "TG" => "توجو", "TH" => "تايلاند", "TJ" => "طاجيكستان", "TK" => "توكيلاو", "TL" => "تيمور الشرقية (تيمور الشرقية)", "TM" => "تركمانستان", "TN" => "تونس", "TO" => "تونجا", "TR" => "تركيا", "TT" => "ترينيداد وتوباجو", "TV" => "توفالو", "TW" => "تايوان", "TZ" => "تنزانيا", "UA" => "أوكرانيا", "UG" => "أوغندا", "UM" => "جزر فرعية تابعة للولايات المتحدة", "US" => "الولايات المتحدة", "UY" => "أوروجواي", "UZ" => "أوزبكستان", "VA" => "دولة الفاتيكان", "VC" => "سانت فينسنت وجرينادينز", "VE" => "فنزويلا", "VG" => "جزر العذراء البريطانية", "VI" => "جزر العذراء، الولايات المتحدة", "VN" => "فيتنام", "VU" => "فانواتو", "WF" => "واليس وفوتونا", "WS" => "ساموا", "YE" => "اليمن", "YT" => "مايوت", "ZA" => "جنوب أفريقيا", "ZM" => "زامبيا", "ZW" => "زيمبابوي"];

  foreach ($countries_en as $code => $name){
    $terms_obj = $term_storage->loadByProperties([
      'vid' => 'countries',
      'name' => $name
    ]);

    if(!$terms_obj){
      Term::create([
        'vid' => 'countries',
        'name' => $name,
      ])->addTranslation('ar', ['name' => $countries_ar[$code]])
        ->save();
    }
    else{
      $term_obj = reset($terms_obj);
      if(!$term_obj->hasTranslation('ar')) {
        $term_obj->addTranslation('ar', ['name' => $countries_ar[$code]])->save();
      }
    }
  }
}

/**
 * Install custom: ETAX POS
 */
function etax_settings_update_9105() {
  \Drupal::service('module_installer')->install([
    'etax_pos',
  ]);
}

function etax_settings_update_9106() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_device_model')) {

    $tbl = [
      'description' => 'etax models and brands for POS devices.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'pos_brand' => ['type' => 'varchar', 'length' => 256, 'not null' => TRUE],
        'pos_model' => ['type' => 'varchar', 'length' => 256, 'not null' => TRUE],
        'pos_os_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'pos_type_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'user_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'created' => ['type' => 'int', 'not null' => TRUE],//timestamp
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'user_id' => ['user_id']],
      'foreign keys' => [
        'user_id' => ['table' => 'users', 'columns' => ['user_id' => 'uid']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_device_model', $tbl);
  }
}

function etax_settings_update_9107() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_device_sn')) {

    $tbl = [
      'description' => 'etax serial numbers for POS devices.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'serial_num' => ['type' => 'varchar', 'length' => 50, 'not null' => TRUE],
        'created' => ['type' => 'int', 'not null' => TRUE],//timestamp
      ],
      'primary key' => ['id'],
      'unique keys' => ['serial_num' => ['serial_num']],
      'indexes' => ['id' => ['id'], 'model_id' => ['model_id']],
      'foreign keys' => [
        'model_id' => ['table' => 'etax_device_model', 'columns' => ['model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_device_sn', $tbl);
  }
}

function etax_settings_update_9108() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_pos_account_status_log')) {

    $tbl = [
      'description' => 'Log POS companies status update.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'user_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'admin_id' => ['type' => 'int', 'unsigned' => TRUE, 'default' => null],
        'comment' => ['type' => 'text'],
        'timestamp' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['user_id' => ['user_id']],
      'foreign keys' => [
        'user_id' => ['table' => 'users', 'columns' => ['user_id' => 'uid']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_pos_account_status_log', $tbl);
  }
}

function etax_settings_update_9109() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_pos_model_status_log')) {

    $tbl = [
      'description' => 'Log POS models status update.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'admin_id' => ['type' => 'int', 'unsigned' => TRUE, 'default' => null],
        'comment' => ['type' => 'text'],
        'timestamp' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['model_id' => ['model_id']],
      'foreign keys' => [
        'model_id' => ['table' => 'etax_device_model', 'columns' => ['model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_pos_model_status_log', $tbl);
  }
}

/**
 * Install feature: Content Type Basic page
 * Install feature: Content Type FAQs
 * Install feature: Content Type Videos
 * Install feature: Etax Core
 * Install feature: Etax Roles and Permissions
 * Install feature: Etax Site
 * Install feature: Etax Users
 */
function etax_settings_update_9110() {
  \Drupal::service('module_installer')->install([
    'content_type_basic_page',
    'content_type_faqs',
    'content_type_videos',
    'etax_core',
    'etax_roles_and_permissions',
    'etax_site',
    'etax_users',
  ]);
}

/**
 * Install custom: Etax Translations
 */
function etax_settings_update_9111() {
  \Drupal::service('module_installer')->install([
    'etax_translations',
  ]);
}

/**
 * Install custom: Etax Migration
 */
function etax_settings_update_9112() {
  \Drupal::service('module_installer')->install([
    'etax_migration',
  ]);
}

function etax_settings_update_9113() {
  $schema = Database::getConnection()->schema();

  $technical_specs = ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE];
  $company_certificate = ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE];
  $contracts_maintenance_after_sales = ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE];
  if(!$schema->fieldExists('etax_device_model', 'technical_specs')) {
    $schema->addField('etax_device_model', 'technical_specs', $technical_specs);
  }
  if(!$schema->fieldExists('etax_device_model', 'company_certificate')) {
    $schema->addField('etax_device_model', 'company_certificate', $company_certificate);
  }
  if(!$schema->fieldExists('etax_device_model', 'contracts_maintenance_after_sales')) {
    $schema->addField('etax_device_model', 'contracts_maintenance_after_sales', $contracts_maintenance_after_sales);
  }

  $warranty = ['type' => 'varchar', 'length' => 256];
  $avg_repair_time = ['type' => 'varchar', 'length' => 256];
  $delivery_time = ['type' => 'varchar', 'length' => 256];
  $price = ['type' => 'varchar', 'length' => 256];
  if(!$schema->fieldExists('etax_device_model', 'warranty')) {
    $schema->addField('etax_device_model', 'warranty', $warranty);
  }
  if(!$schema->fieldExists('etax_device_model', 'avg_repair_time')) {
    $schema->addField('etax_device_model', 'avg_repair_time', $avg_repair_time);
  }
  if(!$schema->fieldExists('etax_device_model', 'delivery_time')) {
    $schema->addField('etax_device_model', 'delivery_time', $delivery_time);
  }
  if(!$schema->fieldExists('etax_device_model', 'price')) {
    $schema->addField('etax_device_model', 'price', $price);
  }

  $device_replacement = ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE]; // 0|No 1|Yes
  $devices_per_month = ['type' => 'int', 'unsigned' => TRUE];
  $devices_pre_year = ['type' => 'int', 'unsigned' => TRUE];
  if(!$schema->fieldExists('etax_device_model', 'device_replacement')) {
    $schema->addField('etax_device_model', 'device_replacement', $device_replacement);
  }
  if(!$schema->fieldExists('etax_device_model', 'devices_per_month')) {
    $schema->addField('etax_device_model', 'devices_per_month', $devices_per_month);
  }
  if(!$schema->fieldExists('etax_device_model', 'devices_pre_year')) {
    $schema->addField('etax_device_model', 'devices_pre_year', $devices_pre_year);
  }

  $release_date = ['type' => 'int'];
  if(!$schema->fieldExists('etax_device_model', 'release_date')) {
    $schema->addField('etax_device_model', 'release_date', $release_date);
  }

  $usage = ['type' => 'int', 'unsigned' => TRUE];
  $technical_support = ['type' => 'int', 'unsigned' => TRUE];
  if(!$schema->fieldExists('etax_device_model', 'usage')) {
    $schema->addField('etax_device_model', 'usage', $usage);
  }
  if(!$schema->fieldExists('etax_device_model', 'technical_support')) {
    $schema->addField('etax_device_model', 'technical_support', $technical_support);
  }
}

/**
 * Update Table Serial number : maximum chars should be 100
 */
function etax_settings_update_9114()
{
  $schema = Database::getConnection()->schema();

  if ($schema->fieldExists('etax_device_sn', 'serial_num')) {
    $schema->changeField('etax_device_sn', 'serial_num', 'serial_num', ['type' => 'varchar', 'length' => 100, 'not null' => TRUE]);
  }
}

/**
 * Update warranty field in models : type be int instead of varchar
 */
function etax_settings_update_9115() {
  $schema = Database::getConnection()->schema();
  if($schema->fieldExists('etax_device_model', 'warranty')) {
    $schema->dropField('etax_device_model', 'warranty');
    $schema->addField('etax_device_model', 'warranty', ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => FALSE]);
  }
}

/**
 * Create Table for weight calculations for accounts and models
 * @return void
 */
function etax_settings_update_9116() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_pos_accounts_models_weight')) {

    $tbl = [
      'description' => 'Calculate weight for accounts and models.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'type_id' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE], // 0|Account 1|Model
        'reference_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'approval_type_id' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE], // 0|Commercial 1|Legal 2|Technical
        'weight_details' => ['type' => 'blob', 'size' => 'big'], // Serialized data
        'total_weight' => ['type' => 'numeric', 'unsigned' => TRUE, 'precision' => 5, 'scale' => 2, 'not null' => TRUE],
        'admin_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'comment' => ['type' => 'text'],
        'timestamp' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['type_id' => ['type_id'], 'reference_id' => ['reference_id'], 'approval_type_id' => ['approval_type_id']],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_pos_accounts_models_weight', $tbl);
  }
}

/**
 * Add attachment field in weight
 */
function etax_settings_update_9117() {
  $schema = Database::getConnection()->schema();

  if(!$schema->fieldExists('etax_pos_accounts_models_weight', 'attachment_id')) {
    $field = ['type' => 'int', 'unsigned' => TRUE,'default' => null];
    $schema->addField('etax_pos_accounts_models_weight', 'attachment_id', $field);
  }
}

/**
 * Remove field 'Contracts of maintenance centers and after-sales service' from Model
 */
function etax_settings_update_9119() {
  $schema = Database::getConnection()->schema();

  if($schema->fieldExists('etax_device_model', 'contracts_maintenance_after_sales')) {
    $schema->dropField('etax_device_model', 'contracts_maintenance_after_sales');
  }
}

/**
 * Remove field 'avg_repair_time' from Model
 * Remove field 'delivery_time' from Model
 *
 * Add field 'avg_repair_time_in_cairo' from Model
 * Add field 'avg_repair_time_out_cairo' from Model
 * Add field 'delivery_time_in_cairo' from Model
 * Add field 'delivery_time_out_cairo' from Model
 */
function etax_settings_update_9120() {
  $schema = Database::getConnection()->schema();
  //Remove
  if($schema->fieldExists('etax_device_model', 'avg_repair_time')) {
    $schema->dropField('etax_device_model', 'avg_repair_time');
  }
  if($schema->fieldExists('etax_device_model', 'delivery_time')) {
    $schema->dropField('etax_device_model', 'delivery_time');
  }
  //Add
  $field = ['type' => 'varchar', 'length' => 256];
  if(!$schema->fieldExists('etax_device_model', 'avg_repair_time_in_cairo')) {
    $schema->addField('etax_device_model', 'avg_repair_time_in_cairo', $field);
  }
  if(!$schema->fieldExists('etax_device_model', 'avg_repair_time_out_cairo')) {
    $schema->addField('etax_device_model', 'avg_repair_time_out_cairo', $field);
  }
  if(!$schema->fieldExists('etax_device_model', 'delivery_time_in_cairo')) {
    $schema->addField('etax_device_model', 'delivery_time_in_cairo', $field);
  }
  if(!$schema->fieldExists('etax_device_model', 'delivery_time_out_cairo')) {
    $schema->addField('etax_device_model', 'delivery_time_out_cairo', $field);
  }
}

/**
 * Add field 'Preshared Key' for Models
 */
function etax_settings_update_9121(){
  $schema = Database::getConnection()->schema();

  if (!$schema->fieldExists('etax_device_model', 'preshared_key')) {
    $field = ['type' => 'int', 'unsigned' => TRUE, 'default' => null];
    $schema->addField('etax_device_model', 'preshared_key', $field);//yy-nnnnnn
  }
}

function etax_settings_update_9122() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_taxpayer_account')) {

    $tbl = [
      'description' => 'etax accounts for taxpayers.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'user_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'national_id' => ['type' => 'varchar', 'length' => 14, 'not null' => TRUE],
        'mobile' => ['type' => 'varchar', 'length' => 11, 'not null' => TRUE],
        'tax_registration_number' => ['type' => 'varchar', 'length' => 9, 'not null' => TRUE],
        'tax_registration_file' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'commercial_registration_number' => ['type' => 'varchar', 'length' => 50, 'not null' => TRUE],
        'commercial_registration_file' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'user_id' => ['user_id']],
      'foreign keys' => [
        'user_id' => ['table' => 'users', 'columns' => ['user_id' => 'uid']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_taxpayer_account', $tbl);
  }
}

/**
 * create TaxPayer POS Models Table
 */
function etax_settings_update_9123() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_taxpayer_pos_models')) {

    $tbl = [
      'description' => 'etax pos models for taxpayers.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'taxpayer_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'device_name' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'model_name' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'serial_number' => ['type' => 'varchar','length'=>255, 'not null' => TRUE],
        'supplier_name' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'tax_registration_number' => ['type' => 'varchar', 'length' => 9, 'not null' => TRUE],
        'branch_number' => ['type' => 'varchar', 'length' => 11, 'not null' => TRUE],
        'use_type' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'trad_mark' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'pos_os_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'device_status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'certified_status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'valid_from' => ['type' => 'int', 'not null' => TRUE],
        'valid_to' => ['type' => 'int', 'not null' => TRUE],
        'description' => ['type' => 'text', 'size' => 'big', 'not null' => FALSE],
        'created' => ['type' => 'int', 'not null' => TRUE],//timestamp

      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'taxpayer_id' => ['taxpayer_id']],
      'foreign keys' => ['taxpayer_id' => ['table' => 'etax_taxpayer_account', 'columns' => ['taxpayer_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_taxpayer_pos_models', $tbl);
  }
}

/**
 * create TaxPayer POS Model handled Table
 */
function etax_settings_update_9124() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_taxpayer_pos_handled_models')) {

    $tbl = [
      'description' => 'etax pos handled models for taxpayers.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'handled_taxpayer_model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'handled_processor' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_memory' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_memory_card_reader' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_display_resolution' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_display_touchscreen' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_operating_system' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_wireless_communication' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_positioning' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_card_reader_support_protocols' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_card_reader_msr' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_card_reader_smart' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_card_reader_emv' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_contactless' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_camera' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_peripheral_ports' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_security' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_pin_pad_master' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_pin_pad_des' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_printer' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_certification' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_power_compatible' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_power_battery' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_environmental' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_card_slot' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_hard_token_os' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_hard_token_connectivity' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_hard_token_power' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_hard_token_temp' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_micro_sdhc_compatible' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_micro_sdhc_os' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_micro_sdhc_connectivity' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_micro_sdhc_electrical' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_micro_sdhc_temp' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_software_sdk' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_software_modifiable' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_software_dev' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'handled_other' => ['type' => 'text', 'size' => 'big', 'not null' => FALSE],

      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'handled_taxpayer_model_id' => ['handled_taxpayer_model_id']],
      'foreign keys' => ['handled_taxpayer_model_id' => ['table' => 'etax_taxpayer_pos_models', 'columns' => ['handled_taxpayer_model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_taxpayer_pos_handled_models', $tbl);
  }
}

/**
 * create TaxPayer POS Model cashier Table
 */
function etax_settings_update_9125() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_taxpayer_pos_cashier_models')) {

    $tbl = [
      'description' => 'etax pos handled models for taxpayers.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'cashier_taxpayer_model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'cashier_processor' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_memory' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_memory_card_reader' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_display_resolution' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_display_touchscreen' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_operating_system' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_wireless_communication' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_camera' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_peripheral_ports' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_printer' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_power' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_hard_token_os' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_hard_token_connectivity' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_software_sdk' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_software_modifiable' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_software_dev' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'cashier_other' => ['type' => 'text', 'size' => 'big', 'not null' => FALSE],

      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'cashier_taxpayer_model_id' => ['cashier_taxpayer_model_id']],
      'foreign keys' => ['cashier_taxpayer_model_id' => ['table' => 'etax_taxpayer_pos_models', 'columns' => ['cashier_taxpayer_model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_taxpayer_pos_cashier_models', $tbl);
  }
}

/**
 * create TaxPayer POS Model status log Table
 */
function etax_settings_update_9126() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_taxpayer_pos_status_log')) {

    $tbl = [
      'description' => 'Log POS taxpayer status update.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'taxpayer_model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'admin_id' => ['type' => 'int', 'unsigned' => TRUE, 'default' => null],
        'comment' => ['type' => 'text'],
        'timestamp' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'taxpayer_model_id' => ['taxpayer_model_id']],
      'foreign keys' => ['taxpayer_model_id' => ['table' => 'etax_taxpayer_pos_models', 'columns' => ['taxpayer_model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_taxpayer_pos_status_log', $tbl);
  }
}

/**
 * Add field batch number for etax_taxpayer_pos_models table
 */
function etax_settings_update_9127() {
  $schema = Database::getConnection()->schema();
  //Add
  $field = ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE];
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'batch_num')) {
    $schema->addField('etax_taxpayer_pos_models', 'batch_num', $field);
  }

  //POS OS : Optional
  if($schema->fieldExists('etax_taxpayer_pos_models', 'pos_os_id')) {
    $schema->changeField('etax_taxpayer_pos_models', 'pos_os_id', 'pos_os_id',
      ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE]);
  }

  //Valid to : Optional
  if($schema->fieldExists('etax_taxpayer_pos_models', 'valid_to')) {
    $schema->changeField('etax_taxpayer_pos_models', 'valid_to', 'valid_to',
      ['type' => 'int', 'not null' => FALSE]);
  }
}

/**
 * Update fields for etax_taxpayer_account table
 */
function etax_settings_update_9128() {
  $schema = Database::getConnection()->schema();
  //tax_registration_file : Optional
  if($schema->fieldExists('etax_taxpayer_account', 'tax_registration_file')) {
    $schema->changeField('etax_taxpayer_account', 'tax_registration_file', 'tax_registration_file',
      ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE]);
  }

  //commercial_registration_number : Optional
  if($schema->fieldExists('etax_taxpayer_account', 'commercial_registration_number')) {
    $schema->changeField('etax_taxpayer_account', 'commercial_registration_number', 'commercial_registration_number',
      ['type' => 'varchar', 'length' => 50, 'not null' => FALSE]);
  }

  //commercial_registration_file : Optional
  if($schema->fieldExists('etax_taxpayer_account', 'commercial_registration_file')) {
    $schema->changeField('etax_taxpayer_account', 'commercial_registration_file', 'commercial_registration_file',
      ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE]);
  }

}

/**
 * create taxpayer reservation table
 */
function etax_settings_update_9129() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_taxpayer_reservation')) {

    $tbl = [
      'description' => 'Schedule appointment for POS certification.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'name' => ['type' => 'varchar', 'length' => 256, 'not null' => TRUE],
        'mobile' => ['type' => 'varchar', 'length' => 11, 'not null' => TRUE],
        'email' => ['type' => 'varchar','length'=>256, 'not null' => TRUE],
        'tax_registration_number' => ['type' => 'varchar', 'length' => 9, 'not null' => TRUE],
        'date' => ['type' => 'int', 'not null' => TRUE],//timestamp
        'hour' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1],
        'number_of_devices' => ['type' => 'int', 'unsigned' => TRUE, 'default' => null],
        'devices_file'=>['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'notes' => ['type' => 'text'],
        'created' => ['type' => 'int', 'not null' => TRUE],

      ],
      'primary key' => ['id'],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_taxpayer_reservation', $tbl);
  }
}

/**
 * drop fields for etax_taxpayer_account table
 */
function etax_settings_update_9130() {
  $schema = Database::getConnection()->schema();
  if($schema->fieldExists('etax_taxpayer_account', 'tax_registration_file')) {
     $schema->dropField('etax_taxpayer_account', 'tax_registration_file');
  }
   if($schema->fieldExists('etax_taxpayer_account', 'commercial_registration_number')) {
     $schema->dropField('etax_taxpayer_account', 'commercial_registration_number');
   }
   if($schema->fieldExists('etax_taxpayer_account', 'commercial_registration_file')) {
     $schema->dropField('etax_taxpayer_account', 'commercial_registration_file');
   }
}
/**
 * drop fields for etax_taxpayer_pos_models
 */
function etax_settings_update_9131() {
  $schema = Database::getConnection()->schema();
  if($schema->fieldExists('etax_taxpayer_pos_models', 'trad_mark')) {
    $schema->dropField('etax_taxpayer_pos_models', 'trad_mark');
  }
  if($schema->fieldExists('etax_taxpayer_pos_models', 'tax_registration_number')) {
    $schema->dropField('etax_taxpayer_pos_models', 'tax_registration_number');
  }
}

/**
 * change foreign key to be related users table instead of etax_taxpayer_account table
 */
function etax_settings_update_9132() {
  $schema = Database::getConnection()->schema();
  $schema->dropIndex('etax_taxpayer_pos_models','taxpayer_id');
  $spec=[
    'fields' => [
      'taxpayer_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
      ],
    'foreign keys' => ['taxpayer_id' => ['table' => 'users', 'columns' => ['taxpayer_id' => 'uid']]]
  ];
  $schema->addIndex('etax_taxpayer_pos_models','taxpayer_id',['taxpayer_id'],$spec);
}

/**
 * drop etax_taxpayer_pos_handled_models and etax_taxpayer_pos_cashier_models
 */
function etax_settings_update_9133()
{
  $schema = Database::getConnection()->schema();
  if($schema->tableExists('etax_taxpayer_pos_handled_models')) {
    $schema->dropTable('etax_taxpayer_pos_handled_models');
  }
  if($schema->tableExists('etax_taxpayer_pos_cashier_models')) {
    $schema->dropTable('etax_taxpayer_pos_cashier_models');
  }
}

/**
 * add columns to etax_taxpayer_pos_models
 */
function etax_settings_update_9134() {
  $schema = Database::getConnection()->schema();
  $ram_field = ['type' => 'varchar', 'length' => 255];
  $rom_field = ['type' => 'varchar', 'length' => 255];
  $storage_field = ['type' => 'varchar', 'length' => 255];
  $card_reader_field = ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'default' => 0];
  $version_field = ['type' => 'varchar', 'length' => 255];
  $communication_field = ['type' => 'varchar', 'length' => 255];
  $sim_card_field = ['type' => 'varchar', 'length' => 11];
  $gps_field = ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'default' => 0];
  $payment_bank_field = ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'default' => 0];
  $pci_field = ['type' => 'varchar', 'length' => 255];

  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'ram')) {
    $schema->addField('etax_taxpayer_pos_models', 'ram', $ram_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'rom')) {
    $schema->addField('etax_taxpayer_pos_models', 'rom', $rom_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'storage')) {
    $schema->addField('etax_taxpayer_pos_models', 'storage', $storage_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'card_reader')) {
    $schema->addField('etax_taxpayer_pos_models', 'card_reader', $card_reader_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'version')) {
    $schema->addField('etax_taxpayer_pos_models', 'version', $version_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'communication')) {
    $schema->addField('etax_taxpayer_pos_models', 'communication', $communication_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'sim_card')) {
    $schema->addField('etax_taxpayer_pos_models', 'sim_card', $sim_card_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'gps')) {
    $schema->addField('etax_taxpayer_pos_models', 'gps', $gps_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'payment_bank')) {
    $schema->addField('etax_taxpayer_pos_models', 'payment_bank', $payment_bank_field);
  }
  if(!$schema->fieldExists('etax_taxpayer_pos_models', 'pci')) {
    $schema->addField('etax_taxpayer_pos_models', 'pci', $pci_field);
  }

}

/**
 * create vendor account table
 */
function etax_settings_update_9135() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_vendor_account')) {

    $tbl = [
      'description' => 'etax accounts for vendors.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'user_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'company_name' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'mobile' => ['type' => 'varchar', 'length' => 11, 'not null' => TRUE],
        'tax_registration_number' => ['type' => 'varchar', 'length' => 9],
        'engineer_name' => ['type' => 'varchar', 'length' => 255],
        'engineer_mobile' => ['type' => 'varchar', 'length' => 11],
        'engineer_email' => ['type' => 'varchar', 'length' => 255],
        'address' => ['type' => 'varchar', 'length' => 255],
        'active_from' => ['type' => 'int'],
        'active_to' => ['type' => 'int'],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE], //active 1 inactive be 0
        'admin_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'btc_id' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'created' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'user_id' => ['user_id'],'admin_id' => ['admin_id']],
      'foreign keys' => [
        'user_id' => ['table' => 'users', 'columns' => ['user_id' => 'uid']] ,
        'admin_id' => ['table' => 'users', 'columns' => ['admin_id' => 'uid']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_vendor_account', $tbl);
  }
}

/**
 * create etax_vendor_pos_models
 */
function etax_settings_update_9136() {

  $schema = Database::getConnection()->schema();
  if(!$schema->tableExists('etax_vendor_pos_models')) {

    $tbl = [
      'description' => 'etax pos models for vendors.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'user_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'processor' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'trade_mark' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'model_name' => ['type' => 'varchar','length'=>255, 'not null' => TRUE],
        'ram' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'rom' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'storage' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'card_reader' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null'=>TRUE],
        'pos_os_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'version' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'communication' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        'sim_card' => ['type' => 'varchar', 'length' => 11],
        'gps' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null'=>TRUE],
        'payment_bank' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null'=>TRUE],
        'pci' => ['type' => 'varchar', 'length' => 255],
        'type' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null'=>TRUE],
        'device_status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE],
        'certified_status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE],
        'active_from' => ['type' => 'int'],
        'active_to' => ['type' => 'int'],
        'description' => ['type' => 'text', 'size' => 'big', 'not null' => FALSE],
        'btc_id' => ['type' => 'varchar', 'length' => 255],
        'created' => ['type' => 'int', 'not null' => TRUE],//timestamp
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'user_id' => ['user_id']],
      'foreign keys' => ['user_id' => ['table' => 'users', 'columns' => ['user_id' => 'uid']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_vendor_pos_models', $tbl);
  }

}

/**
 * create Vendor POS Model handled Table
 */
function etax_settings_update_9137() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_vendor_pos_handled_models')) {

    $tbl = [
      'description' => 'etax pos handled models for vendors.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'vendor_model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'document_sdk' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'sample_application_features' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'library_root_options' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'sign_profile' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'sign_tool' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'security_implementation' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'terminal_password' => ['type' => 'text', 'size' => 'big'],
        'framework_version' => ['type' => 'varchar', 'length' => 255],
        'pre_shared_key' => ['type' => 'varchar', 'length' => 255],
        'created' => ['type' => 'int', 'not null' => TRUE],//timestamp
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'vendor_model_id' => ['vendor_model_id']],
      'foreign keys' => ['vendor_model_id' => ['table' => 'etax_vendor_pos_models', 'columns' => ['vendor_model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_vendor_pos_handled_models', $tbl);
  }
}

/**
 * create Vendor POS Model status log Table
 */
function etax_settings_update_9138() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_vendor_pos_status_log')) {

    $tbl = [
      'description' => 'Log POS model vendor status update.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'admin_id' => ['type' => 'int', 'unsigned' => TRUE, 'default' => null],
        'comment' => ['type' => 'text'],
        'timestamp' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'model_id' => ['model_id']],
      'foreign keys' => ['model_id' => ['table' => 'etax_vendor_pos_models', 'columns' => ['model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_vendor_pos_status_log', $tbl);
  }
}

/**
 * create Vendor POS Model Devices Table
 */
function etax_settings_update_9139() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_vendor_device_sn')) {

    $tbl = [
      'description' => 'etax serial numbers for vendors POS devices.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'model_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'serial_num' => ['type' => 'varchar', 'length' => 100, 'not null' => TRUE],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'created' => ['type' => 'int', 'not null' => TRUE],//timestamp
      ],
      'primary key' => ['id'],
      //'unique keys' => ['serial_num' => ['serial_num']],
      'indexes' => ['id' => ['id'], 'model_id' => ['model_id']],
      'foreign keys' => [
        'model_id' => ['table' => 'etax_vendor_pos_models', 'columns' => ['model_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_vendor_device_sn', $tbl);
  }
}

/**
 * Add field batch number for etax_vendor_device_sn table
 */
function etax_settings_update_9140() {
  $schema = Database::getConnection()->schema();
  //Add
  $field = ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE];
  if(!$schema->fieldExists('etax_vendor_device_sn', 'batch_num')) {
    $schema->addField('etax_vendor_device_sn', 'batch_num', $field);
  }
}

/**
 * create vendor reservation table
 */
function etax_settings_update_9141() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_vendor_reservation')) {

    $tbl = [
      'description' => 'Schedule appointment for technical examination for POS models.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'model_id' => ['type' => 'int', 'not null' => TRUE],
        'date' => ['type' => 'int', 'not null' => TRUE],//timestamp
        'hour' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1],
        'notes' => ['type' => 'text'],
        'created' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_vendor_reservation', $tbl);
  }
}


/**
 * Add certificate to model for vendors
 */
function etax_settings_update_9142() {
  $schema = Database::getConnection()->schema();

  if(!$schema->fieldExists('etax_vendor_pos_models', 'certificate_id')) {
    $field = ['type' => 'int', 'unsigned' => TRUE, 'default' => null];
    $schema->addField('etax_vendor_pos_models', 'certificate_id', $field);
  }
  if(!$schema->fieldExists('etax_vendor_pos_models', 'certificate_sn')) {
    $field = ['type' => 'varchar', 'length' => 255, 'default' => null];
    $schema->addField('etax_vendor_pos_models', 'certificate_sn', $field);
  }
}

/**
 * Add comments for technical examination between vendors and technical users
 */
function etax_settings_update_9143() {
  $schema = Database::getConnection()->schema();
  if(!$schema->tableExists('etax_vendor_reservation_comments')) {

    $tbl = [
      'description' => 'Save comments for technical examination between vendors and technical users.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'reservation_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'user_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'comment' => ['type' => 'text', 'not null' => TRUE],
        'doc_fid' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE],
        'timestamp' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['reservation_id' => ['reservation_id'], 'user_id' => ['user_id']],
      'foreign keys' => [
        'user_id' => ['table' => 'users_field_data', 'columns' => ['user_id' => 'uid']],
        'reservation_id' => ['table' => 'etax_vendor_reservation', 'columns' => ['reservation_id' => 'id']]
      ]
    ];

    $schema->createTable('etax_vendor_reservation_comments', $tbl);
  }
}
/**
 * create Vendor POS Device status log Table
 */
function etax_settings_update_9144() {
  $schema = Database::getConnection()->schema();

  if(!$schema->tableExists('etax_vendor_pos_device_status_log')) {

    $tbl = [
      'description' => 'Log POS device vendor status update.',

      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'device_id' => ['type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE],
        'status' => ['type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0],
        'admin_id' => ['type' => 'int', 'unsigned' => TRUE, 'default' => null],
        'comment' => ['type' => 'text'],
        'timestamp' => ['type' => 'int', 'not null' => TRUE],
      ],
      'primary key' => ['id'],
      'indexes' => ['id' => ['id'], 'model_id' => ['device_id']],
      'foreign keys' => ['device_id' => ['table' => 'etax_vendor_device_sn', 'columns' => ['device_id' => 'id']] ,
      ],
      'collation' => 'utf8mb4_unicode_ci',
      'mysql_character_set' => 'utf8mb4',
    ];

    $schema->createTable('etax_vendor_pos_device_status_log', $tbl);
  }
}
